"""
Django settings for pccs project.

Generated by 'django-admin startproject' using Django 1.10.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os
from subprocess import CalledProcessError, check_output
from . import secrets

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Path to containing git repository (if exists)
try:
    GIT_ROOT = check_output('cd "%s";git rev-parse --show-toplevel'%(BASE_DIR), shell=True).split('\n')[0].decode("utf-8")
except CalledProcessError:
    GIT_ROOT = BASE_DIR
# Path to mountpoint
try:
    MNT_ROOT = check_output('stat --format %%m "%s"'%(BASE_DIR), shell=True).split('\n')[0].decode("utf-8")
except CalledProcessError:
    MNT_ROOT = '/'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = secrets.SECRET_KEY

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*'] # []


# Application definition

INSTALLED_APPS = [	
	# Django apps
	'django.contrib.auth',
	'django.contrib.admin',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',

	# Other apps
	'bootstrap3',
	#'bootstrap3_datetime',
	'dal',
	'dal_select2',
	'widget_tweaks',

	# Project apps
	'users.apps.UsersConfig',
	'teams.apps.TeamsConfig',
	'organizations.apps.OrganizationsConfig',
	'contests.apps.ContestsConfig',
	'alerts.apps.AlertsConfig',
]

MIDDLEWARE = [
	'django.middleware.security.SecurityMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'django.middleware.common.CommonMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

BOOTSTRAP3 = {
	# The URL to the jQuery JavaScript file
	'jquery_url': '//code.jquery.com/jquery.min.js',

	# The Bootstrap base URL
	'base_url': '//maxcdn.bootstrapcdn.com/bootstrap/3.3.7/',

	# The complete URL to the Bootstrap CSS file (None means derive it from base_url)
	'css_url': '/pccs/static/spacelab-bootstrap.css',

	# The complete URL to the Bootstrap CSS file (None means no theme)
	'theme_url': None,

	# The complete URL to the Bootstrap JavaScript file (None means derive it from base_url)
	'javascript_url': None,

	# Put JavaScript in the HEAD section of the HTML document (only relevant if you use bootstrap3.html)
	'javascript_in_head': False,

	# Include jQuery with Bootstrap JavaScript (affects django-bootstrap3 template tags)
	'include_jquery': False,

	# Label class to use in horizontal forms
	'horizontal_label_class': 'col-md-3',

	# Field class to use in horizontal forms
	'horizontal_field_class': 'col-md-9',

	# Set HTML required attribute on required fields
	'set_required': True,

	# Set HTML disabled attribute on disabled fields
	'set_disabled': False,

	# Set placeholder attributes to label if no placeholder is provided
	'set_placeholder': False,

	# Class to indicate required (better to set this in your Django form)
	'required_css_class': '',

	# Class to indicate error (better to set this in your Django form)
	'error_css_class': 'has-error',

	# Class to indicate success, meaning the field has valid input (better to set this in your Django form)
	'success_css_class': 'has-success',

	# Renderers (only set these if you have studied the source and understand the inner workings)
	'formset_renderers':{
		'default': 'bootstrap3.renderers.FormsetRenderer',
	},
	'form_renderers': {
		'default': 'bootstrap3.renderers.FormRenderer',
	},
	'field_renderers': {
		'default': 'bootstrap3.renderers.FieldRenderer',
		'inline': 'bootstrap3.renderers.InlineFieldRenderer',
	},
}

AUTHENTICATION_BACKENDS = [
	'users.backends.ModelBackend',
]

ROOT_URLCONF = 'pccs.urls'

TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS': [os.path.join(BASE_DIR, 'templates')],
		'APP_DIRS': True,
		'OPTIONS': {
			'context_processors': [
				'django.template.context_processors.debug',
				'django.template.context_processors.request',
				'django.contrib.auth.context_processors.auth',
				'django.contrib.messages.context_processors.messages',
			],
		},
	},
]

WSGI_APPLICATION = 'pccs.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
	'default': {
		'ENGINE': 'django.db.backends.mysql',
		'NAME': secrets.DB_NAME,
		'USER': secrets.DB_USER,
		'PASSWORD': secrets.DB_PASS,
		'HOST': 'localhost',
		'PORT': '8000'
	}
}

# Travis CI
import sys
if 'test' in sys.argv:
	DATABASES['default']['ENGINE'] = 'django.db.backends.sqlite3'
	DATABASES['default']['NAME'] = os.path.join(BASE_DIR, 'db.sqlite3')


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{
		'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	},
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

#LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'US/Eastern'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Login urls
LOGIN_URL = 'users:login'
LOGIN_REDIRECT_URL = 'home'

# Dynamic content is saved to 'uploads' folder
MEDIA_ROOT = os.path.join(BASE_DIR, '')
MEDIA_URL = '/'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/pccs/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = [
	os.path.join(BASE_DIR, os.path.join('pccs', 'static')),
	os.path.join(BASE_DIR, 'vendor')
]

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
	'django.contrib.staticfiles.finders.FileSystemFinder',
	'django.contrib.staticfiles.finders.AppDirectoriesFinder',
#    'django.contrib.staticfiles.finders.DefaultStorageFinder',
)

# Testing
FIXTURE_DIRS = (os.path.join(BASE_DIR, 'fixtures'),)

# Email Server
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = secrets.SERVER_EMAIL
SERVER_EMAIL = secrets.SERVER_EMAIL
EMAIL_HOST = secrets.EMAIL_HOST
EMAIL_PORT = secrets.EMAIL_PORT
EMAIL_HOST_USER = secrets.SERVER_EMAIL
EMAIL_HOST_PASSWORD = secrets.EMAIL_HOST_PASSWORD
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
